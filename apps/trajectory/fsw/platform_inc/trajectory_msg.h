/**
 * @file trajectory_msg.h
 * @brief definition of messages generated by the trajectory messages
 */
#ifndef ICAROUS_CFS_TRAJECTORY_MSG_H
#define ICAROUS_CFS_TRAJECTORY_MSG_H

#include "cfe.h"

/**
 * @defgroup TRAJECTORY_MESSAGES
 * @brief Messages generated by the trajectory monitoring application
 * @ingroup TRAJECTORY_MONITOR
 * @ingroup MESSAGES
 * @{
 */

 /**
 * @enum algorithm_e
 * @brief search algorithm type
 */
typedef enum {
    _GRID,              ///< A simple grid based Astar algorithm (Requires a keep in geofence to bound the search space)
    _ASTAR,             ///< A pseudo-motion primitive type Astar algorithm
    _RRT,               ///< Rapidly exploring random tree based algorithm (Requires a keep in geofence to bound the search space)
    _SPLINES            ///< Bsplines based planner (experimental planner)
}algorithm_e;

/**
 * @struct trajectory_request_t
 * @brief Request computation of a trajectory
 */
typedef struct{
   uint8_t TlmHeader[CFE_SB_TLM_HDR_SIZE]; /**< cFS header information */
   algorithm_e algorithm;                  /**< algorithm to use */
   double initialPosition[3];              /**< initial position, lat (degree), lon (degree), alt (m) */
   double initialVelocity[3];              /**< initial velocity track (degree), ground speed (m/s), vertical speed (m/s) */
   double finalPosition[3];                /**< final position  (lat, lon, alt )*/
}trajectory_request_t;

/**
 * @struct flightplan_monitor_t
 * @brief Information regarding the mission flight plan
 */
typedef struct{
    uint8_t TlmHeader[CFE_SB_TLM_HDR_SIZE]; /**< cFS header information */
    char planID[10];                        /**< Plan ID */
    int nextWP;                             /**< Next waypoint */
    double allowedXtrackError;              /**< allowed cross track deviaiton (m)*/
    double dist2NextWP;                     /**< distance to next WP (m)*/
    double crossTrackDeviation;             /**< cross track deviation (m) left(+), right(-)*/
    double interceptManeuver[3];            /**< intercept maneuver (track (degree), ground speed (m/s), vertical speed (m/s)*/
    double interceptHeadingToPlan;          /**< intercept heading to plan */
    double resolutionSpeed;                 /**< flight plan resolution speed (m/s); */
    algorithm_e searchType;                 /**< preferred search algorithm to be used for trajectory generation*/
}flightplan_monitor_t;

/**
 * @struct trajectory_parameters_t
 * @brief trajectory parameters
 */
 typedef struct{
    uint8_t TlmHeader[CFE_SB_TLM_HDR_SIZE];
    double obsbuffer;                    ///< buffer [m] added to obstacle (obstacle sides are expanded by this much)
    double maxCeiling;                   ///< Max ceiling for flight [m]

    // Astar parameters
    bool   astar_enable3D;               ///< Enable 3D search for A star algorithm (not used in grid search)
    double astar_gridSize;               ///< A star grid size for grid search (m)
    double astar_resSpeed;               ///< Ownship speed used for A star search (m/s)
    double astar_lookahead;              ///< Lookahead time in seconds (s)
    char astar_daaConfigFile[50];        ///< DAA configuration file for A star serach

    // RRT parameters
    double rrt_resSpeed;                 ///< Ownship speed used for RRT search
    int rrt_numIterations;               ///< Total number of RRT iterations
    double rrt_dt;                       ///< Time step values in (s) used in one Range Kutta integration.
    int rrt_macroSteps;                  ///< Total number of Runga Kutta integration steps in one RRT iteration.
    double rrt_capR;                     ///< Capture circle radius (s) for final goal
    char rrt_daaConfigFile[50];          ///< Input DAA configuration file for RRT search.

    // Flight plan monitoring parameters
    double xtrkDev;                      ///< Allowed cross track deviation.
    double xtrkGain;                     ///< Proportional gain used for cross track deviation maneuver computation.
    double resSpeed;                     ///< Resolution speed when returning to flight plan.

    // Preferred search algorithm to use
    uint8_t searchAlgorithm;            ///< Algorithm used for computing a new path.
 }trajectory_parameters_t;

/**@}*/
#endif //ICAROUS_CFS_TRAJECTORY_MSG_H
